@page "/WebApi"
@using Microsoft.Extensions.Configuration
@using System.Net.Http
@using Uroboro.Common.Models
@inject HttpClient Http
@inject IConfiguration Configuration
@*
    @using System.Net.Http.Headers
    @using System.Net.Http.Json
    @using Microsoft.AspNetCore.Components.WebAssembly.Authentication
    @inject IAccessTokenProvider TokenProvider
*@

<h3>WebApi</h3>

<input @bind="newItemName" placeholder="New Todo Item" />
<button @onclick="@AddItem">Add</button>

<input type="checkbox" @bind="editItem.IsComplete" />
<input @bind="editItem.Name" />
<button @onclick="@SaveItem">Save</button>

<input @bind="id" />
<button @onclick="@DeleteItem">Delete</button>

@*<h1>ToDo Request</h1>

    <button @onclick="PostRequest">Submit POST request</button>

    <p>Response body returned by the server:</p>

    <p>@responseBody</p>*@

@code {
    private TodoItem[] todoItems;

    protected override async Task OnInitializedAsync() =>
        todoItems = await Http.GetFromJsonAsync<TodoItem[]>($"{Configuration["WebApiUri"]}TodoItems");

    private string newItemName;

    private async Task AddItem()
    {
        var addItem = new TodoItem { Name = newItemName, IsComplete = false };
        await Http.PostAsJsonAsync("api/TodoItems", addItem);
    }

    private TodoItem editItem = new TodoItem();

    private void EditItem(long id)
    {
        editItem = todoItems.Single(i => i.Id == id);
    }

    private async Task SaveItem() =>
        await Http.PutAsJsonAsync($"api/TodoItems/{editItem.Id}", editItem);

    private long id;

    private async Task DeleteItem() =>
        await Http.DeleteAsync($"api/TodoItems/{id}");

    //private string responseBody;

    //private async Task PostRequest()
    //{
    //    var requestMessage = new HttpRequestMessage()
    //    {
    //        Method = new HttpMethod("POST"),
    //        RequestUri = new Uri("https://localhost:10000/api/TodoItems"),
    //        Content =
    //            JsonContent.Create(new WebApiTodoItem
    //            {
    //                Name = "My New Todo Item",
    //                IsComplete = false
    //            })
    //    };

    //  requestMessage.SetBrowserRequestCredentials(BrowserRequestCredentials.Include);

    //    var tokenResult = await TokenProvider.RequestAccessToken();

    //    if (tokenResult.TryGetToken(out var token))
    //    {
    //        requestMessage.Headers.Authorization =
    //            new AuthenticationHeaderValue("Bearer", token.Value);

    //        requestMessage.Content.Headers.TryAddWithoutValidation(
    //            "x-custom-header", "value");

    //        var response = await Http.SendAsync(requestMessage);
    //        var responseStatusCode = response.StatusCode;

    //        responseBody = await response.Content.ReadAsStringAsync();
    //    }
    //}
}