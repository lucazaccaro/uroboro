@page "/Features"
@using Microsoft.Extensions.Logging;
@using Uroboro.PL.Blazor.Models;
@inject ILoggerFactory LoggerFactory

<h3>Temp</h3>

<button class="btn btn-primary" @onclick="TestLog">Click me</button>

<PasswordField @bind-Password="password" />

<Counter IncrementAmount="1" OnClickCallback="@ShowMessage" />
<Counter IncrementAmount="10" OnClickCallback="@ShowMessage" />

<h2>@message</h2>

@for (var i = 1; i < 4; i++)
{
    var buttonNumber = i;

    <button class="btn btn-primary"
            @onclick="@(e => UpdateHeading(e, buttonNumber))">
        Button #@i
    </button>
}

<input @ref="exampleInput" />

<button @onclick="ChangeFocus">Focus the Input Element</button>

<h3>Flights</h3>

@*
    /*
     * The following code will cause 25 sec UI freeze
     */
    <div style="height:500px;overflow-y:scroll">
        @foreach (var flight in allFlights)
        {
            <FlightSummary @key="flight" Flight="flight" />
        }
    </div>
*@

<div style="height:250px;overflow-y:scroll">
    <Virtualize Items="@allFlights" Context="flight">
        <FlightSummary @key="flight" Flight="flight" />
    </Virtualize>
</div>


@code {
    private int currentCount = 0;

    private void TestLog()
    {
        var logger = LoggerFactory.CreateLogger<Features>();
        logger.LogWarning("Someone has clicked me!");
    }

    private string password;

    private void ShowMessage()
    {
        Console.WriteLine("click on child");
    }

    private string message = "Select a button to learn its position.";

    private void UpdateHeading(MouseEventArgs e, int buttonNumber)
    {
        message = $"You selected Button #{buttonNumber} at " +
            $"mouse position: {e.ClientX} X {e.ClientY}.";
    }

    private ElementReference exampleInput;

    private async Task ChangeFocus()
    {
        await exampleInput.FocusAsync();
    }

    private List<Flight> allFlights = new List<Flight>();

    protected override Task OnInitializedAsync()
    {
        for (var i = 0; i < 10000; i++)
        {
            allFlights.Add(new Flight() { FlightId = i, Summary = "Summary" });
        }
        return base.OnInitializedAsync();
    }
}
