@page "/Features"
@using Microsoft.Extensions.Logging;
@inject ILoggerFactory LoggerFactory

<h3>Temp</h3>
<p>This component demonstrates other Blazor features.</p>

<h4>Log</h4>
<button class="btn btn-sm btn-primary" @onclick="TestLog">Click me and look at VS Output</button>
<hr />

<h4>Password Field</h4>
<PasswordField @bind-Password="password" />
<hr />

<h4>Counter Component</h4>
<h5>Increment by 1</h5>
<Counter IncrementAmount="1" OnClickCallback="@ShowMessage" />
<br />
<h5>Increment by 10</h5>
<Counter IncrementAmount="10" OnClickCallback="@ShowMessage" />
<br />
<hr />

<h4>Position</h4>
<p>@message</p>
@for (var i = 1; i < 4; i++)
{
    var buttonNumber = i;
    <button class="btn btn-sm btn-primary" style="margin-right: 5px;" @onclick="@(e => UpdateHeading(e, buttonNumber))">
        Button #@i
    </button>
}
<hr />

<h4>Focusing Element</h4>
<input @ref="exampleInput" />
<button class="btn btn-sm btn-primary" @onclick="ChangeFocus">Focus the Input Element</button>
<hr />

<h4>Virtualize Items</h4>
<div style="height:250px;overflow-y:scroll">
    <Virtualize Items="@allFlights" Context="flight">
        <FlightSummary @key="flight" Flight="flight" />
    </Virtualize>
</div>
<hr />

<h4>Components Chain</h4>
<p>Parent Message: <b>@parentMessage</b></p>
<p>
    <button class="btn btn-sm btn-primary" @onclick="ChangeValue">Change from Parent</button>
</p>
<ChildSample @bind-ChildMessage="parentMessage" />
<hr />

@code {
    private List<Flight> allFlights = new List<Flight>();
    private int currentCount = 0;
    private ElementReference exampleInput;
    private string message = "Select a button to learn its position.";
    private string parentMessage = "Initial value set in Parent";
    private string password;

    protected override Task OnInitializedAsync()
    {
        for (var i = 0; i < 10000; i++)
        {
            allFlights.Add(new Flight() { FlightId = i, Summary = "Summary" });
        }
        return base.OnInitializedAsync();
    }

    private async Task ChangeFocus()
    {
        await exampleInput.FocusAsync();
    }

    private void ChangeValue()
    {
        parentMessage = $"Set in Parent {DateTime.Now}";
    }

    private void ShowMessage()
    {
        Console.WriteLine("Click on child");
    }

    private void TestLog()
    {
        var logger = LoggerFactory.CreateLogger<Features>();
        logger.LogWarning("Someone has clicked me!");
    }

    private void UpdateHeading(MouseEventArgs e, int buttonNumber)
    {
        message = $"You selected Button #{buttonNumber} at " +
            $"mouse position: {e.ClientX} X {e.ClientY}.";
    }
}